# High-Performance Nginx Configuration for AlgoVeda WebSocket Gateway
# Optimized for trading applications with ultra-low latency requirements

# Global configuration
user nginx;
worker_processes auto;
worker_rlimit_nofile 100000;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block for connection handling
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

# HTTP block with optimizations for trading
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format optimized for trading systems
    log_format trading_format '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" '
                             'rt=$request_time uct="$upstream_connect_time" '
                             'uht="$upstream_header_time" urt="$upstream_response_time" '
                             'sid="$http_x_session_id" cid="$http_x_client_id"';
    
    access_log /var/log/nginx/access.log trading_format;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 1000;
    client_max_body_size 1m;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;
    
    # Gzip compression for non-WebSocket traffic
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # Rate limiting for DDoS protection
    limit_req_zone $binary_remote_addr zone=trading_api:10m rate=100r/s;
    limit_req_zone $http_x_client_id zone=client_limit:10m rate=1000r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Upstream servers for AlgoVeda components[7][15][11]
    upstream algoveda_core {
        least_conn;
        server algoveda-core-1:8080 max_fails=3 fail_timeout=10s;
        server algoveda-core-2:8080 max_fails=3 fail_timeout=10s;
        server algoveda-core-3:8080 max_fails=3 fail_timeout=10s;
        keepalive 32;
    }
    
    upstream websocket_gateway {
        ip_hash; # Sticky sessions for WebSocket connections
        server websocket-gateway-1:8081 max_fails=2 fail_timeout=5s;
        server websocket-gateway-2:8081 max_fails=2 fail_timeout=5s;
        server websocket-gateway-3:8081 max_fails=2 fail_timeout=5s;
        keepalive 64;
    }
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Main server block for HTTPS
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.algoveda.com;
        
        # SSL certificates
        ssl_certificate /etc/ssl/certs/algoveda.crt;
        ssl_certificate_key /etc/ssl/private/algoveda.key;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Rate limiting
        limit_req zone=trading_api burst=200 nodelay;
        limit_conn conn_limit_per_ip 50;
        
        # WebSocket endpoint with optimized configuration[15]
        location /ws {
            # Apply client-specific rate limiting
            limit_req zone=client_limit burst=100 nodelay;
            
            # Proxy to WebSocket gateway
            proxy_pass http://websocket_gateway;
            
            # WebSocket specific headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Trading-specific headers
            proxy_set_header X-Client-IP $remote_addr;
            proxy_set_header X-Session-ID $http_x_session_id;
            proxy_set_header X-Client-ID $http_x_client_id;
            
            # Timeout settings optimized for trading
            proxy_connect_timeout 4s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s; # 5 minutes for long-lived connections
            
            # Buffer settings for high-frequency data
            proxy_buffering off;
            proxy_cache off;
            
            # Keep connections alive
            proxy_socket_keepalive on;
        }
        
        # REST API endpoints
        location /api/ {
            # Rate limiting for API endpoints
            limit_req zone=trading_api burst=50 nodelay;
            
            # Proxy to core engine
            proxy_pass http://algoveda_core;
            
            # Standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API-specific timeouts
            proxy_connect_timeout 2s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Enable compression for API responses
            gzip_proxied any;
            
            # Caching for static API responses
            location ~* \.(json)$ {
                expires 1m;
                add_header Cache-Control "public, no-transform";
            }
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://algoveda_core;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }
        
        # Metrics endpoint (restricted access)
        location /metrics {
            # Restrict to monitoring systems
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://algoveda_core;
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 10s;
        }
        
        # Static assets (frontend)
        location / {
            root /var/www/algoveda;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
        }
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name api.algoveda.com;
        return 301 https://$server_name$request_uri;
    }
    
    # Internal monitoring server
    server {
        listen 8080;
        server_name localhost;
        access_log off;
        
        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Health check
        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    # Direct TCP connections for ultra-low latency trading
    upstream trading_tcp {
        server algoveda-core-1:9090;
        server algoveda-core-2:9090;
        server algoveda-core-3:9090;
    }
    
    server {
        listen 9090;
        proxy_pass trading_tcp;
        proxy_timeout 1s;
        proxy_connect_timeout 1s;
        proxy_bind $remote_addr transparent;
    }
}
